import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Step 1: Load the dataset
df = pd.read_csv('/Users/icentral/Desktop/MOVIE RATING PREDICTION WITH PYTHON/IMDb Movies India.csv', encoding='ISO-8859-1')

# Step 2: Explore the dataset
print("First few rows of the dataset:")
print(df.head())

# Basic information about the dataset
print("\nDataset Info:")
print(df.info())

# Step 3: Handle invalid 'Votes' values (clean and convert to numeric)
df['Votes'] = df['Votes'].astype(str).str.replace(r'\D', '', regex=True)  # Remove non-numeric characters
df['Votes'] = pd.to_numeric(df['Votes'], errors='coerce').fillna(0)

# Step 4: Clean the 'Year' column
df['Year'] = pd.to_numeric(df['Year'], errors='coerce').fillna(0)

# Step 5: Clean the 'Duration' column
df['Duration'] = df['Duration'].str.extract('(\d+)').astype(float)
df['Duration'] = df['Duration'].fillna(0)

# Step 6: Handle missing 'Rating' values using median
df['Rating'] = df['Rating'].fillna(df['Rating'].median())

# Step 7: Encode categorical variables using Label Encoding
categorical_cols = ['Genre', 'Director', 'Actor 1', 'Actor 2', 'Actor 3']
label_encoders = {}
for col in categorical_cols:
    df[col] = df[col].fillna('Unknown')  # Fill missing values
    label_encoders[col] = LabelEncoder()
    df[col] = label_encoders[col].fit_transform(df[col])  # Encode categorical values

# Step 8: Remove non-numeric columns that are not needed for training
columns_to_drop = ['Title', 'Description', 'Language', 'Country']
for col in columns_to_drop:
    if col in df.columns:
        df = df.drop(columns=[col])

# Step 9: Ensure all columns are numeric
non_numeric_cols = df.select_dtypes(exclude=[np.number]).columns
if len(non_numeric_cols) > 0:
    print("\nNon-numeric columns found in df:", non_numeric_cols)
    df = df.drop(columns=non_numeric_cols)

# Step 10: Remove rows with missing target variable ('Rating')
df = df.dropna(subset=['Rating'])

# Step 11: Split the data into training and testing sets
X = df.drop('Rating', axis=1)  # Features
y = df['Rating']  # Target variable

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

print(f"\nTraining set size: {X_train.shape[0]}")
print(f"Test set size: {X_test.shape[0]}")

# Step 12: Ensure all data types are numeric
X_train = X_train.astype(np.float64)
X_test = X_test.astype(np.float64)

# Step 13: Train the model with RandomForestRegressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Step 14: Make predictions on the test set
y_pred = model.predict(X_test)

# Step 15: Evaluate the model's performance
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Display the accuracy results in table format
print("\n| Metric                  | Value |")
print("|------------------------|----------------|")
print(f"| Mean Absolute Error (MAE) | {mae:.4f} |")
print(f"| Mean Squared Error (MSE)  | {mse:.4f} |")
print(f"| RÂ² Score                 | {r2:.4f} |")

